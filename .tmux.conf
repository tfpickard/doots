# ==========================
# ===  General settings  ===

# g==========================

# set -g default-terminal "screen-256color"
set -g default-terminal "tmux-256color"
# set-option -sa terminal-overrides ",xterm*:Tc"
set -ga terminal-overrides ",xterm-256color:RGB"
# set -ga terminal-overrides ",*256col*:Tc"
# set -ga terminal-overrides ",xterm-kitty:Tc"
setenv -g COLORTERM truecolor
set -g history-limit 50000
# set-option -g lock-after-time 3600
set -g buffer-limit 20
set -sg escape-time 0
set -g display-time 1500
set -g display-panes-time 1500
# set -g remain-on-exit off
set -g repeat-time 300
setw -g allow-rename on
# setw -g automatic-rename off
setw -g aggressive-resize on
set -s escape-time 0
set -g base-index 1
setw -g pane-base-index 1
set-option -g renumber-windows on
set -g focus-events on
# set -sa terminal-overrides ',screen-256color:RGB'
set -g visual-activity off
# Change prefix key to C-a, easier to type, same to "screen"
unbind C-b
# set -g prefix C-a
set -g prefix C-a
bind-key -n C-b send-prefix
bind-key C-a resize-pane -Z

# Set parent terminal title to reflect current window in tmux session
set -g set-titles on
set -g set-titles-string "#I:#W"

# Enable mouse support
set -g mouse on

# ==========================
# ===   Key bindings     ===
# ==========================

# Unbind default key bindings, we're going to override
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
unbind '}'    # swap-pane -D
unbind '{'    # swap-pane -U
unbind [    # paste-buffer
unbind ]
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer
unbind =    # choose-buffer
unbind z    # zoom-pane
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left
unbind r
unbind S

bind C-n switchc -n
bind C-p switchc -p
# bind C-backspace switchc -l

bind C-r  display "sourcing..." \; \
        source-file ~/.tmux.conf \; \
        display "...sourced"
# Edit configuration and reload
cfgfile="\${HOME}/.tmux.conf"
bind C-e new-window -n 'tmux.conf' \; \
    display "opening $cfg with \${EDITOR}..." \; \
    popup "echo opening $cfgfile...; sleep 1;"
    # \${EDITOR:-vim} ~/.tmux.conf"

bind C-t display "installing/updating/sourcing..." \; \
    run '~/.tmux/plugins/tpm/bin/install_plugins;' \; \
    run '~/.tmux/plugins/tpm/bin/update_plugins all;' \; \
    source-file ~/.tmux.conf \; \
    display "...installed/updated/sourced" \; \
    send-keys -R ENTER \; send-keys ENTER


# new window and retain cwd
bind c new-window -c "#{pane_current_path}"


# Rename session and window
# bind r command-prompt -I "#{window_name}" "rename-window '%%'"

bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
# bind | split-window -h -c "#{pane_current_path}"
# bind _ split-window -v -c "#{pane_current_path}"

# Select pane and windows
bind -r C-[ previous-window
bind -r C-] next-window
bind -r ` select-pane -t :.-
bind -r \~ select-pane -t :.+
# bind -r Tab last-window   # cycle thru MRU tabs
# bind -r C-a swap-pane -D
# bind -r C-A swap-pane -U

x="popped pane #{pane_index} from #I out to new window... "
bind s break-pane \; display "$x #I"
# Zoom pane
bind + resize-pane -Z

# Link window
bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
# bind \ if '[ #{pane_index} -eq 1 ]' \
#      'swap-pane -s "!"' \
#      'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Kill pane/window/session shortcuts
unbind x               # unbind-key “x” from it’s current job of “ask and then close”
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# ================================================
# ===     Copy mode, scroll and clipboard      ===
# ================================================
# set -g @copy_use_osc52_fallback on

# Prefer vi style key table
setw -g mode-keys vi

# bind p paste-buffer
# bind C-p choose-buffer

# trigger copy mode by
# bind -n M-Up copy-mode
bind C-\\ copy-mode

# Scroll up/down by 1 line, half screen, whole screen
bind -T copy-mode-vi M-Up              send-keys -X scroll-up
bind -T copy-mode-vi M-Down            send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind -T copy-mode-vi PageDown          send-keys -X page-down
bind -T copy-mode-vi PageUp            send-keys -X page-up

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

# # wrap default shell in reattach-to-user-namespace if available
# # there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
# # don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
# if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
#     "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"
#
yank="~/.tmux/yank.sh"
#
# Copy selected text
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi Y send-keys -X copy-line \;\
    run "tmux save-buffer - | $yank"
bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
    run "tmux save-buffer - | $yank"
bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    run "tmux save-buffer - | $yank"

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
bind -T copy-mode-vi MouseDragEnd1Pane \
    send-keys -X copy-pipe "$yank"
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
   send-keys -X clear-selection

# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# tmux show-options -g -s set-clipboard
# set-clipboard on|external

set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

# bind '$' run "~/.tmux/renew_env.sh"
#
# run -b '[[ -d ~/.tmux/plugins/powerline ]] || \
#     git clone https://github.com/erikw/tmux-powerline.git \
#         ~/.tmux/plugins/powerline'
#
# set-option -g status on
# set-option -g status-interval 2
# set-option -g status-justify "centre"
# set-option -g status-left-length 60
# set-option -g status-right-length 90
# set-option -g status-left "#(~/.tmux/plugins/powerline/powerline.sh left)"
# set-option -g status-right "#(~/.tmux/plugins/powerline/powerline.sh right)"
# set-hook -g session-created 'run-shell "~/.tmux/plugins/powerline/powerline.sh init"'
# # [[[ plugins
# COLOUR (base16)
#
# scheme: "oomox-retartastic"
# author: "oomox-retartastic"
# base00: "140c0f"
# base01: "4b001a"
# base02: "49003d"
# base03: "847871"
# base04: "000000"
# base05: "f4e5d4"
# base06: "f56eaf"
# base07: "ff91e0"
# base08: "ff4e6a"
# base09: "e15900"
# base0A: "ff5f00"
# base0B: "b97500"
# base0C: "317b9a"
# base0D: "bd65f0"
# base0E: "ff4af0"
# base0F: "dc3f21"
# base00="#000000"
# base01="#413531"
# base02="#423f3b"
# base03="#5f5f5f"
# base04="#000000"
# base05="#bfbfbf"
# base06="#b6a29b"
# base07="#bab3b7"
# base08="#f18b4e"
# base09="#bda551"
# base0a="#cba111"
# base0b="#54b881"
# base0c="#3bb5be"
# base0d="#a19fe5"
# base0e="#d68cd5"
# base0f="#c3843b"

# scheme: "oomox-outrun-dark"
# author: "oomox-outrun-dark"
base00="#00002a"
base01="#20204a"
base02="#30305a"
base03="#686892"
base04="#000016"
base05="#d0d0fa"
base06="#e0e0ff"
base07="#f5f5ff"
base08="#ff4242"
base09="#fc8d28"
base0a="#f3e877"
base0b="#59f176"
base0c="#0ef0f0"
base0d="#66b0ff"
base0e="#f10596"
base0f="#e95321"
# thm_bg=$base00
# thm_fg=$base07
# thm_red=$base08
# thm_pink=$base0e
# thm_blue=$base0d
# thm_gray=$base01
# thm_aqua=$base0b
# thm_orange="#ff4e6a"
# thm_black4=$base04

thm_bg="#191f1d"
thm_fg="#d9e6f2"
thm_red="#a83971"
thm_pink="#e01b86"
thm_blue="#3b76b0"
thm_gray="#8a8a8a"
thm_aqua="#3bb076"
thm_green="#71a839"
thm_brightgreen="#76b03b"
thm_brightpurple="#763bb0"
thm_orange="#ff4e6a"
thm_black4="#303030"
thm_white="#cfcfcf"
#
# default statusbar colors
set-option -g status-style "fg=$thm_fg,bg=$thm_bg"

# default window title colors
set-window-option -g window-status-style "fg=$thm_white,bg=$thm_black4"

# active window title colors
set-window-option -g window-status-current-style "fg=$thm_red,bg=$thm_black4"

# pane border
set-option -g pane-border-style "fg=$thm_gray"
set-option -g pane-active-border-style "fg=$thm_pink"

# message text
set-option -g message-style "fg=$thm_white,bg=$thm_black4"

# pane number display
set-option -g display-panes-active-colour $thm_green
set-option -g display-panes-colour $thm_gray

# clock
set-window-option -g clock-mode-colour $thm_brightpurple

# copy mode highligh
set-window-option -g mode-style "fg=$thm_fg,bg=$thm_brightpurple"

# bell
set-window-option -g window-status-bell-style "fg=$thm_white,bg=$thm_red"

set -g status-left ""
#set -g status-right "#[fg=$thm_pink,bg=$thm_bg,nobold,nounderscore,noitalics]#[fg=$thm_bg,bg=$thm_pink,nobold,nounderscore,noitalics] #[fg=$thm_fg,bg=$thm_gray] #W #{?client_prefix,#[fg=$thm_red],#[fg=$thm_aqua]}#[bg=$thm_gray]#{?client_prefix,#[bg=$thm_red],#[bg=$thm_aqua]}#[fBLEMIDIg=$thm_bg] #[fg=$thm_fg,bg=$thm_gray] #S "
set -g status-right "#[fg=$thm_pink,bg=$thm_bg,nobold,nounderscore,noitalics]#[fg=$thm_bg,bg=$thm_pink,nobold,nounderscore,noitalics]#W #[fg=$thm_fg,bg=$thm_gray] #I #{?client_prefix,#[fg=$thm_red],#[fg=$thm_aqua]}#[bg=$thm_gray]#{?client_prefix,#[bg=$thm_red],#[bg=$thm_aqua]}#[fBLEMIDIg=$thm_bg] #[fg=$thm_fg,bg=$thm_gray] #S "

# current_dir
setw -g window-status-format "#[fg=$thm_bg,bg=$thm_blue] #I #[fg=$thm_fg,bg=$thm_gray] #{b:pane_current_path} "
setw -g window-status-current-format "#[fg=$thm_bg,bg=$thm_orange] #I #[fg=$thm_fg,bg=$thm_bg] #{b:pane_current_path} "

# parent_dir/current_dir
# setw -g window-status-format "#[fg=colour232,bg=colour111] #I #[fg=colour222,bg=colour235] #(echo '#{pane_current_path}' | rev | cut -d'/' -f-2 | rev) "
# setw -g window-status-current-format "#[fg=colour232,bg=colour208] #I #[fg=colour255,bg=colour237] #(echo '#{pane_current_path}' | rev | cut -d'/' -f-2 | rev) "

# --------=== Modes
setw -g clock-mode-colour "${thm_blue}"
setw -g mode-style "fg=${thm_pink} bg=${thm_black4} bold"

set-option -g update-environment "DIRENV_DIFF DIRENV_DIR DIRENV_WATCHES"
set-environment -gu DIRENV_DIFF
set-environment -gu DIRENV_DIR
set-environment -gu DIRENV_WATCHES
set-environment -gu DIRENV_LAYOUT
# ============================
# ===       Plugins        ===
# ============================

# first make sure we have tpm
run -b '[[ -d ~/.tmux/plugins/tpm ]] || \
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'


set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @prefix_highlight_bg black
set -g @prefix_highlight_fg red
set -g @prefix_highlight_prefix_prompt 'ꗁ'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_prompt '𖠂_𖠂'
set -g @prefix_highlight_copy_mode_attr "fg=red,bg=black,bold"
set -g @prefix_highlight_output_prefix ''
set -g @prefix_highlight_output_suffix ''

set -g @plugin 'tmux-plugins/tmux-yank'
# set -g @plugin 'tmux-plugins/tmux-online-status'

# set -g @plugin 'tmux-plugins/tmux-open'
# set -g @open-S 'https://www.google.com/search?q='

set -g @plugin 'tmux-plugins/tmux-pain-control'

set -g @plugin 'laktak/extrakto'
set -g @extrakto_split_direction a
set -g @extrakto_split_size "15"
# set -g @extrakto_clip_tool "xsel --input --clipboard" # works better for nvim
set -g @extrakto_clip_tool "pbcopy" # works better for nvim
set -g @extrakto_default_opt "lines"

# set -g @plugin 'obxhdx/tmux-ssh-status'
#
# # set -g @plugin 'MunifTanjim/tmux-mode-indicator'
#
# # set -g @plugin 'MunifTanjim/tmux-suspend'
# # bind ! send-keys F12
# # set -g @suspend_key F12
#
# set -g @plugin 'fcsonline/tmux-thumbs'
# set -g @thumbs-position off_right
# set -g @thumbs-contrast 1
# set -g @thumbs-bg-color blue
# set -g @thumbs-fg-color white
# set -g @thumbs-select-fg-color blue
# set -g @thumbs-select-bg-color white
# set -g @thumbs-hint-bg-color green
# set -g @thumbs-hint-fg-color white
# set -g @thumbs-regexp-2 '[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:' # Match MAC addresses
#
set -g @plugin 'CrispyConductor/tmux-copy-toolkit'
#
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-save 'M-S'
set -g @resurrect-restore 'M-R'
set -g @continuum-restore 'off'

set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-boot 'off'

set -g @plugin 'roosta/tmux-fuzzback'
set -g @fuzzback-popup 1
set -g @fuzzback-bind s
# set -g @plugin 'whame/tmux-modal'
# set -g @plugin 'datamadsen/tmux-pane-menu'
#
run $HOME/.tmux/plugins/tpm/tpm
# ]]]
